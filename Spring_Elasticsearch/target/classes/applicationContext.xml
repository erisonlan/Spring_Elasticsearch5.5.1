<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:elasticsearch="http://www.pilato.fr/schema/elasticsearch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd  
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
        http://www.pilato.fr/schema/elasticsearch http://www.pilato.fr/schema/elasticsearch/elasticsearch-5.0.xsd">

	<!-- 引入db.properties -->
	<context:property-placeholder location="classpath:db.properties"/>

	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
	<context:component-scan base-package="com.fendo"><!-- base-package 如果多个，用“,”分隔 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<!-- 配置数据源c3p0 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${uname}"></property>
		<property name="password" value="${upass}"></property>
		<property name="jdbcUrl" value="${url}"></property>
		<property name="driverClass" value="${driver_class}"></property>
		
		<property name="initialPoolSize" value="${initPoolSize}"></property>
		<property name="maxPoolSize" value="${maxPoolSize}"></property>
	</bean>
	
	<!-- 配置SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 01.引入数据源 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 02.加载MyBatis配置文件 -->
		<property name="configLocation" value="classpath:myBatisConfig.xml"></property>
		<!-- 03.加载MyBatis映射文件 -->
		<!-- <property name="mapperLocations" value="classpath:com/fendo/mapper/*.xml"></property> -->
	</bean>
	
	
	<!-- 扫描basePackage下所有以@MyBatisDao注解的接口 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.fendo.mapper"/>
    </bean>
    
    <!-- 配置声明式事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
     	<property name="dataSource" ref="dataSource"/>
    </bean>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
                   <!--配置事务传播性，隔离级别以及超时回滚等问题 -->
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
             <tx:method name="*" propagation="REQUIRED" />
            
        </tx:attributes>
    </tx:advice>
    
    
    <!-- Spring AOP config 
	  解释一下(* com.evan.crm.service.*.*(..))中几个通配符的含义：
	  第一个 * —— 通配 任意返回值类型
	  第二个 * —— 通配 包com.evan.crm.service下的任意class
	  第三个 * —— 通配 包com.evan.crm.service下的任意class的任意方法
	  第四个 .. —— 通配 方法可以有0个或多个参数
  	-->
    <!-- 配置切面 -->
    <aop:config expose-proxy="true" proxy-target-class="true">
        <!--配置事务切点 -->
        <aop:pointcut id="services" expression="execution(* com.fendo.service.impl.*.*(..))"/>
        <aop:advisor pointcut-ref="services" advice-ref="txAdvice"/>
    </aop:config>
   		
</beans>
